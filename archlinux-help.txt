*** Nick DiGirolamo's Self-Help Guide for Arch Linux Installs
*** Replace things surrounded by ' ' with real-world text and get rid of the ' '
*** Terminal input starts with #

- iwctl to connect to WIFI
    # iwctl
    # device list
    # station 'device' scan
    # station 'device' get-networks
    # station 'device' connect 'SSID'

- Check internet and time
    # ping archlinux.com
    # timedatectl status

- Partition the disks
    - List the disks (any of the below)
        # lsblk
        # fdisk -l
        # parted -l
    - Actually partition the disks
        # cfdisk /dev/'device'
            - For example, # cfdisk /dev/nvme1n1
    - Partition the drive appropriately
        - efi partiton --> 500Mb
        - root partition --> 100Gb
        - home partition --> the rest
    - Format partitions
        - Format the efi partition as f32   --> # mkfs.fat -F 32 /dev/'efi-system-partition'
            - For example, # mkfs.fat -F 32 /dev/nvme1n1p1
        - Format the root partition as ext4 --> # mkfs.ext4 /dev/'root-partition'
        - Format the home partition as ext4 --> # mkfs.ext4 /dev/'home-partition'

- Mount the filesystems
    - Mount the root partition --> # mount /dev/'root-partition' /mnt
    - Then, mount the other stuff. You probably need to include --mkdir to actually make the mount points
    at /mnt/'whatever' to mount the stuff.
        - You need the efi partition -->                   # mount --mkdir /dev/'efi-system-partition' /mnt/boot
        - If you have a home partition, mount that too --> # mount --mkdir /dev/'home-partition' /mnt/home

- Install essential packages
    - Run reflector to get fastest mirrors --> # reflector
    - # pacstrap -K /mnt base base-devel linux linux-firmware man-db man-pages networkmanager refind vi vim
        - base, base-devel, linux, and linux-firmware are all (pretty much) require
        - man-db and man-pages are for info on packages
        - networkmanager for internet access
        - refind for the boot manager
        - vi and vim for text editors.

- Configure the new system
    - Generate fstab file (determines how disks are mounted).
        # genfstab -U /mnt >> /mnt/etc/fstab
        - Check the file to make sure nothing fucked up --> # vim /mnt/etc/fstab
    - Change root into the new system --> # arch-chroot /mnt
    - Set time zone -->                   # ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime
    - Generate /etc/adjtime -->           # hwclock --systohc
    - Set Localization. Uncomment 'en_US.UTF-8 UTF-8' from /etc/locale.gen and then run locale.gen
    Also create locale.conf and set LANG accordingly.
        # vim /etc/locale.gen
        # locale-gen
        # vim /etc/locale.conf
            - LANG=en_US.UTF-8
    - Network configuration
        - Create hostname file --> # vim /etc/hostname
            - Just put whatever hostname you want there and nothing else
        - Also enable networkmanager
            # systemctl enable NetworkManager.service
    - Set root password --> # passwd

- Finally, set up refind
    # refind-install
    - Above is not enough. Next, you need to get the PARTUUID of your root partition
    - # blkid
        - Use the above command to find the your /dev/'root-partition' and get its PARTUUID
    # vim /boot/refind_linux.conf
        - First line --> "Standard Boot" "root=PARTUUID='your root partition's partuuid' rw initrd=initramfs-linux.img"
        - Second line -> "Fallback Boot" "root=PARTUUID='your root partition's partuuid' rw initrd=initramfs-linux-fallback.img"
        - To get your root partition's partuuid, you can do the following
            # ls -la /dev/disk/by-partuuid | grep 'root partition' >> /boot/refind_linux.conf
                - That will dump your root partition's PARTUUID right into refind_linux.conf
        - initrd's argument is initramfs-linux.img, but it may be different depending on where the root of the
        kernel's filesystem is. In this case, the kernel resides on a seperate partition, so the kernel thinks 
        initramfs-linux.img is at the root. In reality, initramfs-linux.img is actually stored at /boot/initramfs-linux.img
        because the boot partition is mounted at /boot
    # vim /boot/EFI/refind/refind.conf
        - timeout 5
        - resolution 1920 1080

- And now you can exit and reboot

- Post-Install Steps
    
    - Get networking set up
        # nmcli device wifi list
        # nmcli device wifi connect 'NETWORK' password 'PASSWORD'
    
    - Update system
        # pacman -Syu
    
    - Configure pacman
        # vim /etc/pacman.conf
            - uncomment Color
            - uncomment ParallelDownloads = 10
            - uncomment multilib repository
    
    - Make a new user
        # useradd -m -G wheel -s /bin/bash 'username'
        # visudo
            - Uncomment wheel group
        # passwd 'username'
            - Put in password for new user
    
    - Set up reflector
        # pacman -S reflector
        # vim /etc/xdg/reflector/reflector.conf
            - Don't set country you don't need to
            - --latest 10
            - --sort rate
        # systemctl start reflector.timer
        # systemctl enable reflector.timer
        # systemctl start reflector.service
            - This last command just runs the service to make sure it actually works. The timer actually runs it.
    
    - Install microcode (one or the other)
        # pacman -S amd-ucode
        # pacman -S intel-ucode
        - Then add it to your kernel options
            - "Standard Boot" "root=PARTUUID='your root partition's partuuid' rw initrd=amd-ucode.img initrd=initramfs-linux.img"
            - "Fallback Boot" "root=PARTUUID='your root partition's partuuid' rw initrd=amd-ucode.img initrd=initramfs-linux-fallback.img"
        - And then verify it worked
            # journalctl -k --grep=microcode

    - Install graphics drivers
        - See this page for more information https://wiki.archlinux.org/title/Xorg
        - Dependency cycles might happen, ignore the warnings
        # pacman -S nvidia

- Finally install a desktop!
    - Install the following for a minimal GNOME desktop
        - baobab
        - cheese
        - eog
        - evince
        - file-roller
        - firefox
        - gdm
        - gnome-backgrounds
        - gnome-console
        - gnome-control-center
        - gnome-disk-utility
        - gnome-system-monitor
        - gnome-tweaks
        - nautilus
        - vlc

- You're done.

    

    
